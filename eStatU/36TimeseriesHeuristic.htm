<!DOCTYPE html>
<html>

<head>
    <title data-msgid="Forecasting"></title>
    <link rel="stylesheet" href="/estat/eStat/css/eStatU.css">
    <script src="/estat/eStat/lib/d3/d3.v4.min.js"></script>
    <script src="/estat/eStat/lib/jquery/jquery-3.2.1.min.js"></script>
    <script src="/estat/eStat/lib/jquery/jquery-ui.min.js"></script>
    <script src="/estat/eStat/lib/DistributionsUtil.js" ></script>
    <script src="/estat/eStat/js/language.js" ></script>
    <script src="/estat/eStat/js/eStatU.js"></script>
    <script src="/estat/eStat/lib/FileSaver.min.js" ></script>
    <script src="/estat/eStat/lib/convertSVG.js"></script>
</head>

<body>

  <div width="600" style="position:absolute; left:10px; top:0px">
    <br>
    <div class="title">
      <b>&nbsp; <span data-msgid="TimeSeries"></span> <span data-msgid="Forecasting"></span> : <span data-msgid="EWMA"></span></b>
      <button class="menu" onclick="menuLoc()" >
        <b><span data-msgid="Menu">Menu</span></b>
      </button>
    </div>
    <br>
    <table class="data">
	<tr>
          <td> &nbsp; &nbsp;</td>
	  <td><b>Y <span data-msgid="input data"></span></b></td>
	  <td colspan="3"><input type="text" size=73 id="data2"></td>
	</tr>
        <tr>
          <td> &nbsp; &nbsp;</td>
          <td style="text-align: right;"><b><span data-msgid="Main Title">Main Title</span></b>&nbsp;</td>
          <td colspan="3"><input type="text" size=50 id="mtitle"></td>
        </tr>
	<tr>
          <td> &nbsp; &nbsp;</td>
          <td style="text-align: right;"><b><span data-msgid="y title">y title</span></b>&nbsp;</td>
          <td><input type="text" size=15 id="ytitle"></td>
 	</tr>
    </table>   
    <p>
    <table class="stat">
      <tbody>
	<tr>
          <td>
            <button type="button" id="execute" >
              <span data-msgid="Execute">Execute</span>
            </button>
          </td>
 	  <td>&nbsp;&nbsp;<span data-msgid="NumberData"></span></td>         
	  <td><span class="fontmath">n<sub>Y</sub></span></td>
	  <td><input type="text" class="textarea" size=6 id="nn41"> <span style="color:red;">( ≤ 120)</span></td>     
 	  <td>&nbsp;&nbsp;<span data-msgid="Mean"></span></td>         
	  <td><span class="fontmath">Y&#772;</span></td>
	  <td><input type="text" class="textarea" size=6 id="yavg"></td>      
	</tr>
      </tbody>
    </table>
    <svg id="chart" width="620" height="400"> </svg> 
    <table>
      <tbody>
	<tr>
 	  <td><button type="button" id="saveGraphU"><span class="tooltiptext" data-msgid="Graph Save">Graph Save</span></button></td>               
          <td><span data-msgid="ForecastingPeriod"></span>&nbsp;&nbsp;</td>
          <td><input type="number" min="0" max="10" value="0" id="nn42" style="text-align:center" onchange="clearScreen()"></td>
          <td><button type="button" id="createTable"><span class="tooltiptext" data-msgid="CreateTable"></span></button>    
          <td><button type="button" id="saveTable"><span class="tooltiptext" data-msgid="SaveTable"></span></button>    
	</tr>
	<tr>
          <td>
            <label>
              <input type="checkbox" id="model1">&nbsp;&nbsp;<span data-msgid="SingleMA"></span>
            </label> 
          </td>
          <td>&nbsp;&nbsp; N = <input type="number" min="2" max="10" size=5 value="3" style="text-align:center" id="ma1N" onchange="redrawModel1()"></td>
          <td><span style="color:red;">1 < N < 10</span></td>
          <td></td>
          <td>&nbsp;RMSE=<input type="text" class="textarea" size=6 id="mse1" style="text-align: right;">&nbsp;</td>
	</tr>
	<tr>
          <td>
            <label>
              <input type="checkbox" id="model2">&nbsp;&nbsp;<span data-msgid="SingleES"></span>
            </label> 
          </td>
          <td>&nbsp;&nbsp; α = <input type="text" size=5 value="0.3" id="es1Alpha" style="text-align:center" onchange="redrawModel2()"></td>
          <td><span style="color:red;">0 < α < 1</span></td>
          <td>S₀ = <input type="text" size=5 style="text-align:center" id="S0" onchange="redrawModel2()"></td>
          <td>&nbsp;RMSE=<input type="text" class="textarea" size=6 id="mse2" style="text-align: right;">&nbsp;</td>
	</tr>
	<tr>
          <td>
            <label>
              <input type="checkbox" id="model3">&nbsp;&nbsp;<span data-msgid="DoubleMA"></span>
            </label> 
          </td>
          <td>&nbsp;&nbsp; N = <input type="number" min="2" max="10" size=5 value="3" style="text-align:center" id="ma2N" onchange="redrawModel3()"></td>
          <td><span style="color:red;">1 < N < 10</span></td>
          <td></td>
          <td>&nbsp;RMSE=<input type="text" class="textarea" size=6 id="mse3" style="text-align: right;">&nbsp;</td>
	</tr>
	<tr>
          <td>
            <label>
              <input type="checkbox" id="model4">&nbsp;&nbsp;<span data-msgid="HoltLinear"></span>
            </label> 
          </td>
          <td>&nbsp;&nbsp;Level α = <input type="text" size=5 value="0.3" style="text-align:center" id="holtAlpha" onchange="redrawModel4()"></td>
          <td><span style="color:red;">0 < α < 1</span></td>
          <td>L₀ = <input type="text" size=5 style="text-align:center" id="holtL0" onchange="redrawModel4()"></td>
          <td>&nbsp;RMSE=<input type="text" class="textarea" size=6 id="mse4" style="text-align: right;">&nbsp;</td>
	</tr>
	<tr>
          <td></td>
          <td>&nbsp;&nbsp;Trend γ = <input type="text" size=5 value="0.3" style="text-align:center" id="holtBeta" onchange="redrawModel4()"></td>
          <td><span style="color:red;">0 < γ < 1</span></td>
          <td>T₀ = <input type="text" size=5 style="text-align:center" id="holtT0" onchange="redrawModel4()"></td>
	</tr>
      </tbody>
    </table>
    <p>
  </div>

  <div width="250" style="position:absolute; left:700px; top:120px;"> 
    &nbsp;&nbsp;
    <p>
    <div id="screenTable" >
      <div id="loc">
      </div>
    </div>
  </div>

  <script>
      var svg     = d3.select("#chart"); 
      var i, ibegin;
      var svgWidth    = 620;
      var svgHeight   = 400;
      var margin      = {top: 80, bottom: 50, left: 60, right: 60};
      var buffer      = 40;
      var graphWidth  = svgWidth - margin.left - margin.right;
      var graphHeight = svgHeight - margin.top - margin.bottom;
      var checkTitle  = true;
      var mTitle, yTitle, xTitle;
      var tobs, sse, mse1, mse2, mse3, mse4; 
      var temp, model, str, strLabel, strModel, yavg;
      var nforecast = 0;
      var ma1N, ma2N, b1, b2, es1Alpha, S0, holtAlpha, holtBeta, holtL0, hlotT0;
      var xobs, xmin, xmax, xgap, gxmin, gxmax, gxrange;
      var yobs, ymin, ymax, ygap, gymin, gymax, gyrange;
      var fontsize = "1em";
      var stat1     = new Array(30);
      var tstat     = new Array(30);
      var rowmax    = 200;
      var tdata     = new Array(rowmax);
      var xdata     = new Array(rowmax);
      var ydata     = new Array(rowmax);
      var yhat1     = new Array(rowmax);
      var yhat2     = new Array(rowmax);
      var yhat3     = new Array(rowmax);
      var yhat4     = new Array(rowmax);
      var MA1       = new Array(rowmax);
      var MA2       = new Array(rowmax);
      var ES1       = new Array(rowmax);
      var ES2       = new Array(rowmax);
      var S         = new Array(rowmax);
      var L         = new Array(rowmax);
      var T         = new Array(rowmax);
      var checkModel    = new Array(10);
      var checkForecast = false;
      for (i=1; i<=4; i++) checkModel[i] = false;
      xTitle = "t";
      document.getElementById("nn41").disabled = true;    
      document.getElementById("yavg").disabled = true;    
      document.getElementById("mse1").disabled = true;    
      document.getElementById("mse2").disabled = true;    
      document.getElementById("mse3").disabled = true;    
      document.getElementById("mse4").disabled = true;    
      svg.selectAll("*").remove();
      // input data control ===================================================
      d3.select("#data2").on("input", function() {
        stat = simplestat("#data2");  
        ydata = data; 
        yobs = stat.n;
      });
      updateData = function() {
        document.getElementById("data2").value = '';    
      }
    
      d3.select("#execute").on("click", function(){ 
          clearExecute();
          document.getElementById("nn42").value = 0;
          document.getElementById("model1").checked=false;
          document.getElementById("model2").checked=false;
          document.getElementById("model3").checked=false;
          document.getElementById("model4").checked=false;
          tobs = yobs;
          // 입력 도수에 숫자 문자 빈칸 있나 체크
          for (i=0; i<tobs; i++) {
            if ( isNaN(ydata[i]) ) {
              svg.append("text").attr("class","mean").attr("x", 250).attr("y", margin.top + 40)
                 .text(alertMsg[48][langNum]).style("stroke","red").style("font-size","1em");
              return;
            }
          }
          // title
          mTitle = d3.select("#mtitle").node().value;
          yTitle = d3.select("#ytitle").node().value;
          // time 1,2,... 통계량
          tobs = yobs;
          nforecast = 0;
          for (i = 0; i < tobs; i++) {
            tdata[i] = i + 1;   // time 1,2,3...
            xdata[i] = tdata[i];
          }
          model1Stat(tobs, tdata, xdata, ydata, stat1);
          document.getElementById("nn41").value = yobs;
          yavg = stat1[11];
          document.getElementById("yavg").value = f2(yavg);
          initialCordinate(tobs, tdata, ydata);    
          model = 1;
          showTimeSeriesPlot(model, tobs, nforecast, tdata, ydata, checkTitle);
      })

      // Single MA 그리기
      d3.select("#model1").on("click",function() {
          if(this.checked) drawModel1();
          else clearModel1();
      })
      // Single ES 그리기
      d3.select("#model2").on("click",function() {
          if(this.checked) drawModel2();
          else clearModel2();
      })
      // Double MA 그리기
      d3.select("#model3").on("click",function() {
          if(this.checked) drawModel3();
          else clearModel3();
      })
      // Holt's Linear ES 그리기
      d3.select("#model4").on("click",function() {
          if(this.checked) drawModel4();
          else clearModel4();
      })

      // svg Graph Save
      d3.select("#saveGraphU").on("click", function() {
        var svg = d3.select("#chart");
        var width = svgWidth;
        var height = svgHeight;
        var svgString = getSVGString(svg.node());
        svgString2Image(svgString, width, height, 'png', save);
        function save(dataBlob, filesize) {
          saveAs(dataBlob, 'eStatGraphU.png');
        }
      });
      // create Table
      d3.select("#createTable").on("click", function() {
        if ( nforecast == 0 ) {alert("Enter forecasting period"); return;}
        for (i=1; i<=4; i++) {
          if (i==1) for (j=0; j<30; j++) tstat[j] = yhat1[j];
          else if (i==2) for (j=0; j<30; j++) tstat[j] = yhat2[j];
          else if (i==3) for (j=0; j<30; j++) tstat[j] = yhat3[j];
          else if (i==4) for (j=0; j<30; j++) tstat[j] = yhat4[j];
          if ( nforecast > 0 && checkModel[i] ) forecastTable(i, tobs, nforecast, tstat);  
        }
      });
      // save Table
      d3.select("#saveTable").on("click", function() {
        head = '<html><head><meta charset="UTF-8"></head><body>';
        tail = '</body></html>';
        saveAs(new Blob([head + d3.select("#screenTable").html() + tail]), "eStatULog.html");
      });
// Single MA
function drawModel1(){
            model = 1;
            ma1N = parseFloat(d3.select("#ma1N").node().value);
            checkModel[1] = true;
            for (i=ma1N-1; i<tobs; i++) {
              sum = 0;
              for (j=i; j>i-ma1N; j--) sum += ydata[j];
              yhat1[i+1] = sum / ma1N;
            }
            sse = 0;
            for (i=ma1N; i <tobs; i++) {
              temp = ydata[i] - yhat1[i];
              sse += temp*temp;
            }
            mse1 = sse / (tobs-ma1N);
            document.getElementById("mse1").value = f4(Math.sqrt(mse1));
            for (i=tobs+1; i<tobs+nforecast; i++) yhat1[i] = yhat1[tobs];
            ibegin = ma1N;
            strLabel = "reglabel"+model;
            strModel = "Single MA(N="+ma1N+")";
            showModel(strModel, strLabel, tobs, nforecast, ibegin, xdata, yhat1);
//            if (nforecast > 0) forecastTable(model, tobs, nforecast, yhat1);  
}
// Single ES
function drawModel2() {
            model = 2;
            checkModel[2] = true;
            es1Alpha = parseFloat(d3.select("#es1Alpha").node().value);
            S0 = parseFloat(d3.select("#S0").node().value);
            if ( isNaN(S0) ) {
              S0 = ydata[0];
              document.getElementById("S0").value = f2(S0);
            }
            S[0] = es1Alpha*ydata[0] + (1-es1Alpha)*S0;
            yhat2[0] = S0;
            for (i=1; i<tobs; i++) {
              S[i] = es1Alpha*ydata[i] + (1-es1Alpha)*S[i-1];
              yhat2[i] = S[i-1];
            }
            sse  = 0;
            for (i=0; i<tobs; i++) {
              temp = ydata[i] - yhat2[i];
              sse += temp * temp;
            }
            mse2 = sse / tobs;
            document.getElementById("mse2").value = f4(Math.sqrt(mse2));
            for (i=tobs; i<tobs+nforecast; i++) yhat2[i] = S[tobs-1];
            ibegin = 0;
            strLabel = "reglabel"+model;
            strModel = "Single ES(α="+es1Alpha+")";
            showModel(strModel, strLabel, tobs, nforecast, ibegin, xdata, yhat2);
//            if (nforecast > 0) forecastTable(model, tobs, nforecast, yhat2);  
}
// Double MA
function drawModel3() {
            model = 3;
            ma2N = parseFloat(d3.select("#ma2N").node().value);
            ma1N = ma2N;
            checkModel[3] = true;
            for (i=ma1N-1; i<tobs; i++) {
              sum = 0;
              for (j=i; j>i-ma1N; j--) sum += ydata[j];
              MA1[i] = sum / ma1N;
            }
            for (i=ma1N+ma2N-2; i<tobs; i++) {
              sum = 0;
              for (j=i; j>i-ma2N; j--) sum += MA1[j];
              MA2[i] = sum / ma2N;
              b2 = 2*(MA1[i] - MA2[i])/(ma1N-1);        // slope at time i
              yhat3[i+1] = 2*MA1[i] - MA2[i] + b2;  // one time forecast
            }
            sse = 0;
            for (i=ma1N+ma2N-1; i <tobs; i++) {
              temp = ydata[i] - yhat3[i];
              sse += temp*temp;
            }
            mse3 = sse / (tobs-ma1N-ma2N+1);
            document.getElementById("mse3").value = f4(Math.sqrt(mse3));
            for (i=tobs+1; i<tobs+nforecast; i++) yhat3[i] = yhat3[tobs] + b2*(i-tobs);
            ibegin = ma1N+ma2N-1;
            strLabel = "reglabel"+model;
            strModel = "Double MA(N="+ma2N+")";
            showModel(strModel, strLabel, tobs, nforecast, ibegin, xdata, yhat3);
//            if (nforecast > 0) forecastTable(model, tobs, nforecast, yhat3);  
}
// Holt's Linear ES
function drawModel4() {
            model = 4;
            checkModel[4] = true;
            holtAlpha = parseFloat(d3.select("#holtAlpha").node().value);
            holtBeta  = parseFloat(d3.select("#holtBeta").node().value);
            holtL0    = parseFloat(d3.select("#holtL0").node().value);
            holtT0    = parseFloat(d3.select("#holtT0").node().value);
            if ( isNaN(holtL0) ) {
              holtL0 = stat1[7];
              document.getElementById("holtL0").value = f2(holtL0);
            }
            if ( isNaN(holtT0) ) {
              holtT0 = stat1[8];
              document.getElementById("holtT0").value = f2(holtT0);
            }
            L[0] = holtAlpha*ydata[0] + (1-holtAlpha)*(holtL0+holtT0);
            T[0] = holtBeta*(L[0]-holtL0) + (1-holtBeta)*holtT0;
            yhat4[0] = holtL0 + holtT0;
            temp = ydata[0] - yhat4[0];
            sse  = temp * temp;
            for (i=1; i<tobs; i++) {
              L[i] = holtAlpha*ydata[i] + (1-holtAlpha)*(L[i-1]+T[i-1]);
              T[i] = holtBeta*(L[i]-L[i-1]) + (1-holtBeta)*T[i-1];
              yhat4[i] = L[i-1] + T[i-1];
              temp = ydata[i] - yhat4[i];
              sse += temp * temp;
            }
            mse4 = sse / tobs;
            document.getElementById("mse4").value = f4(Math.sqrt(mse4));
            for (i=tobs; i<tobs+nforecast; i++) yhat4[i] = L[tobs-1] + (i+1-tobs)*T[tobs-1];
            ibegin = 0;
            strLabel = "reglabel"+model;
            strModel = "Holt's Linear Trend (α="+holtAlpha+", β="+holtBeta+")";
            showModel(strModel, strLabel, tobs, nforecast, ibegin, xdata, yhat4);
//            if (nforecast > 0) forecastTable(model, tobs, nforecast, yhat4);  
}
function redrawModel1() {
  clearModel1();
  drawModel1();
}
function redrawModel2() {
  clearModel2();
  drawModel2();
}
function redrawModel3() {
  clearModel3();
  drawModel3();
}
function redrawModel4() {
  clearModel4();
  drawModel4();
}
function clearModel1() {
     checkModel[1] = false;
     document.getElementById("mse1").value = "";
     svg.selectAll("circle.reglabel1").remove();
     svg.selectAll("line.reglabel1").remove();
     svg.selectAll("text.reglabel1").remove();
     svg.selectAll("circle.forecast1").remove();
}
function clearModel2() {
     checkModel[2] = false;
     document.getElementById("S0").value = "";
     document.getElementById("mse2").value = "";
     svg.selectAll("circle.reglabel2").remove();
     svg.selectAll("line.reglabel2").remove();
     svg.selectAll("text.reglabel2").remove();
     svg.selectAll("circle.forecast2").remove();
}
function clearModel3() {
     checkModel[3] = false;
     document.getElementById("mse3").value = "";
     svg.selectAll("circle.reglabel3").remove();
     svg.selectAll("line.reglabel3").remove();
     svg.selectAll("text.reglabel3").remove();
     svg.selectAll("circle.forecast3").remove();
}
function clearModel4() {
     checkModel[4] = false;
     document.getElementById("holtL0").value = "";
     document.getElementById("holtT0").value = "";
     document.getElementById("mse4").value = "";
     svg.selectAll("circle.reglabel4").remove();
     svg.selectAll("line.reglabel4").remove();
     svg.selectAll("text.reglabel4").remove();
     svg.selectAll("circle.forecast4").remove();
}

function showModel(strModel, strLabel, nobs, nforecast, ibegin, xdata, yhat) {
    var ty = margin.top + model*20;;
    for (i=ibegin; i<nobs+nforecast; i++) {
          svg.append("circle").attr("class",strLabel)
             .attr("cx", margin.left+graphWidth*(xdata[i]-gxmin)/gxrange)
             .attr("cy", margin.top+graphHeight-graphHeight*(yhat[i]-gymin)/gyrange)         
             .attr("r", 3)
             .style("fill",myColor[model])
    }

    var x1  = margin.left + graphWidth*(xdata[ibegin]-gxmin)/gxrange;
    var y1  = margin.top  + graphHeight - graphHeight*(yhat[ibegin]-gymin)/gyrange;
    for (i=ibegin+1; i<nobs+nforecast; i++) {
      var x2  = margin.left + graphWidth*(xdata[i]-gxmin)/gxrange;
      var y2  = margin.top  + graphHeight - graphHeight*(yhat[i]-gymin)/gyrange;
      svg.append("line").attr("class",strLabel)
                .attr("x1",x1)
                .attr("y1",y1)
                .attr("x2",x2)
                .attr("y2",y2)
                .style("stroke",myColor[model]) 
      x1 = x2;
      y1 = y2;
    }
    if(checkTitle) {   
        svg.append("text").attr("class",strLabel)
                .attr("x", margin.left + 20)
                .attr("y", ty)
                .text(strModel)
                .style("stroke",myColor[model]) 
     }
}
// clear parameter
function clearExecute() {
     svg.selectAll("*").remove();
     document.getElementById("S0").value = "";
     document.getElementById("holtL0").value = "";
     document.getElementById("holtT0").value = "";
     document.getElementById("mse1").value = "";
     document.getElementById("mse2").value = "";
     document.getElementById("mse3").value = "";
     document.getElementById("mse4").value = "";
} 
function clearScreen(){
     clearExecute();
     nforecast = parseFloat(d3.select("#nn42").node().value);
     for (i=0; i<tobs; i++) xdata[i] = tdata[i];  
     model1Stat(tobs, tdata, xdata, ydata, stat1);
     for (i=tobs; i<tobs+nforecast; i++) {
       tdata[i] = i+1;
       xdata[i] = tdata[i];
       ydata[i] = stat1[7] + stat1[8]*tdata[i];
     }
     initialCordinate(tobs+nforecast, tdata, ydata);
     showTimeSeriesPlot(model, tobs, nforecast, tdata, ydata, checkTitle);
     if ( checkModel[1] ) drawModel1();
     if ( checkModel[2] ) drawModel2();
     if ( checkModel[3] ) drawModel3();
     if ( checkModel[4] ) drawModel4();
}
function forecastTable(model, nobs, nforecast, yhat) {
    var screenTable = document.getElementById("screenTable");
    var table = document.createElement('table');
    loc.appendChild(table);
    var row, header;
    var i, j, k, strModel, temp;
    var ncol = 2;
    var cell = new Array(4);
    table.style.fontSize = "13px";
    switch (model) {
      case 1:
        strModel = "Single Moving Average (N="+ma1N+")";
        break;
      case 2:
        strModel = "Single Exponential Smoothing (α="+es1Alpha+")";
        break;
      case 3:
        strModel = "Double Moving Average (N="+ma2N+")";
        break;
      case 4:
        strModel = "Holt Double Exponential Smoothing (α="+holtAlpha+", β="+holtBeta+")";
        break;
    }

    k = 0;
    row = table.insertRow(k++);
    row.style.height ="30px";
    for (j=0; j<ncol; j++) {
            cell[j] = row.insertCell(j);
            cell[j].style.textAlign = "center";
            cell[j].style.border = "1px solid black";
    }
    cell[0].innerHTML = "<b>Model</b> "+model;
    cell[1].innerHTML = strModel;
    cell[0].style.width ="70px";
    cell[1].style.width ="100px";

    row  = table.insertRow(k++);
    row.style.height ="25px";
    for (j=0; j<ncol; j++) {
            cell[j] = row.insertCell(j);
            cell[j].style.backgroundColor = "#eee";
            cell[j].style.textAlign = "center";
            cell[j].style.border = "1px solid black";
    }
    for (j=1; j<ncol; j++) {
            cell[j].style.width ="60px";
    }
    cell[0].innerHTML = "<b>t</b>";
    cell[1].innerHTML = "Y hat";

    for (i=nobs; i<nobs+nforecast; i++) {
       row = table.insertRow(k++);
       for (j=0; j<ncol; j++) {
              cell[j] = row.insertCell(j)          
              cell[j].style.textAlign = "center";
              cell[j].style.border = "1px solid black";
       }
       cell[0].innerHTML = i+1;
       cell[1].innerHTML = f4(yhat[i]);
       cell[0].style.backgroundColor = "#eee";
       cell[0].style.textAlign = "center";
    }
}

</script>

</body>
</html>
